MODULE main
VAR
	x   : 1 .. 2;
	pg1 : peterson(1, x, pg2.b);
	pg2 : peterson(2, x, pg1.b);
ASSIGN
	next(x) := case
			(pg1.state = entering_wait)  : 2;
			(pg2.state = entering_wait)  : 1;
			TRUE                         : x;
		esac;

COMPASSION
	( pg1.state = wait, pg1.state = crit )
COMPASSION
	( pg2.state = wait, pg2.state = crit )
COMPASSION
	( pg1.state = noncrit, pg1.state = entering_wait )
COMPASSION
	( pg2.state = noncrit, pg2.state = entering_wait )
COMPASSION
	( pg1.state = crit, pg1.state = noncrit )
COMPASSION
	( pg2.state = crit, pg2.state = noncrit )


LTLSPEC G !(pg1.state = crit & pg2.state = crit)
LTLSPEC G (F (pg1.state = crit)) & G ( F (pg2.state = crit))
LTLSPEC G (pg1.state=crit -> O (pg1.state=entering_wait)) & G (pg2.state=crit -> O (pg2.state=entering_wait))


MODULE peterson(id, x, other_b)
VAR
	state : { noncrit, entering_wait, wait, crit };
ASSIGN
	init(state) := noncrit;
	next(state) := case
			(state = noncrit)                        : { noncrit, entering_wait };
			(state = entering_wait)                  : wait;
			(state = wait) & ((id = x) | !(other_b)) : { wait, crit };
			(state = crit)                           : { crit, noncrit };
			TRUE                                     : state;
		esac;
DEFINE
	b := (state = wait) | (state = crit);