MODULE main
VAR
	round : 1 .. 10 ;
	
	-- proposers
	p1 : proposer(0, round, 2,
					a1.sent_promise_1, a1.promised_r,
					a1.last_voted_r, a1.last_voted_v,
					a2.sent_promise_1, a2.promised_r,
					a2.last_voted_r, a2.last_voted_v,
					a3.sent_promise_1, a3.promised_r,
					a3.last_voted_r, a3.last_voted_v);
	p2 : proposer(1, round, 2,
					a1.sent_promise_2, a1.promised_r,
					a1.last_voted_r, a1.last_voted_v,
					a2.sent_promise_2, a2.promised_r,
					a2.last_voted_r, a2.last_voted_v,
					a3.sent_promise_2, a3.promised_r,
					a3.last_voted_r, a3.last_voted_v);
	
	-- acceptors
	a1 : acceptor(round,
				p1.prepare_sent, p1.booked_round, p1.val,
				p1.accept_sent,
				p2.prepare_sent, p2.booked_round, p2.val,
				p2.accept_sent);
	a2 : acceptor(round,
				p1.prepare_sent, p1.booked_round, p1.val,
				p1.accept_sent,
				p2.prepare_sent, p2.booked_round, p2.val,
				p2.accept_sent);
	a3 : acceptor(round,
				p1.prepare_sent, p1.booked_round, p1.val,
				p1.accept_sent,
				p2.prepare_sent, p2.booked_round, p2.val,
				p2.accept_sent);
	
	-- learners
	l1 : learner(a1.sent_vote, a1.last_voted_v, a1.last_voted_r,
				a2.sent_vote, a2.last_voted_v, a2.last_voted_r,
				a3.sent_vote, a3.last_voted_v, a3.last_voted_r);

ASSIGN
	init(round) := 1;
	next(round) := case
			round < 9  : round + 1;
			TRUE       : 1;
		esac;
-- "(a1.state != crashed) & (a2.state != crashed) & (p1.state != crashed) & (p2.state != crashed)"
JUSTICE
	!(a1.state = crashed)
		& !(a2.state = crashed)
		& !(a3.state = crashed)
JUSTICE
	!(p1.state = crashed)
		--| !(p2.state = crashed)
		& !(p2.state = crashed)

-- C0 the protocol ends
LTLSPEC F ( G (l1.decided))

-- C1 only a proposed value may be chosen
LTLSPEC G ( ((l1.decided & l1.chosen_value = 1)
				-> (H (p1.val = 1)
					| H (p2.val = 1)))
			& ((l1.decided & l1.chosen_value = 2)
				-> (H (p1.val = 2)
					| H (p2.val = 2)))
			& ( l1.decided
				-> ( (l1.chosen_value = 1) | (l1.chosen_value = 2) ) ) )

-- C2 only a single value can reach consensus
LTLSPEC G ( (l1.v1_consensus
				-> ( (l1.vote2 = l1.vote1 | !l1.v2_consensus)
						& (l1.vote3 = l1.vote1 | !l1.v3_consensus)) )
			& (l1.v2_consensus
				-> ( (l1.vote2 = l1.vote1 | !l1.v1_consensus)
						& (l1.vote3 = l1.vote2 | !l1.v3_consensus)) )
			& (l1.v3_consensus
				-> ( (l1.vote2 = l1.vote3 | !l1.v2_consensus)
						& (l1.vote3 = l1.vote1 | !l1.v1_consensus)) ) )

-- C3 only a chosen value may be learned by a learner
LTLSPEC G ( l1.decided
				-> (O (p1.quorum) | O (p2.quorum)) )

-- C4 if an acceptor has voted for a value v1 at round i
	-- then no other value v2 != v1 can be chosen in any previous round
LTLSPEC G ( ((l1.decided
				& l1.chosen_value = l1.vote1
				& l1.vote1 = 1)
					-> H (a1.last_voted_v = 1 | a1.last_voted_v = -1) )
			& ((l1.decided
				& l1.chosen_value = l1.vote1
				& l1.vote1 = 2)
					-> H (a1.last_voted_v = 2 | a1.last_voted_v = -1) )
					
			& ((l1.decided
				& l1.chosen_value = l1.vote2
				& l1.vote2 = 1)
					-> H (a2.last_voted_v = 1 | a2.last_voted_v = -1) )
			& ((l1.decided
				& l1.chosen_value = l1.vote2
				& l1.vote2 = 2)
					-> H (a2.last_voted_v = 2 | a2.last_voted_v = -1) )
					
			& ((l1.decided
				& l1.chosen_value = l1.vote3
				& l1.vote3 = 1)
					-> H (a3.last_voted_v = 1 | a3.last_voted_v = -1) )
			& ((l1.decided
				& l1.chosen_value = l1.vote3
				& l1.vote3 = 2)
					-> H (a3.last_voted_v = 2 | a3.last_voted_v = -1) )
			)

-- ## -- ## -- ## -- ## -- ## -- ## -- ## -- ## -- ## --


MODULE proposer(id, current_r, q,
				recv_pr_1, pr_r_1, lst_r_1, lst_v_1,
				recv_pr_2, pr_r_2, lst_r_2, lst_v_2,
				recv_pr_3, pr_r_3, lst_r_3, lst_v_3)
VAR
	state        : { send_prepare, recv_promise,
					send_accept, end, crashed };
	timeout      : 0 .. 4;
	
	-- first message
	prepare_sent : boolean;
	booked_round : -1 .. 10;
	
	-- second message
	val          : 1 .. 2;
	accept_sent  : boolean;
	
INIT
	state = send_prepare
	& prepare_sent = FALSE
	& accept_sent = FALSE
	& booked_round = -1
	& timeout = 4
	--& val = id+1
	
TRANS

	-- the proposer crashed
	( (state = crashed) -- reset variables
			-> (next(state) = state
					& next(prepare_sent) = FALSE
					& next(accept_sent) = FALSE
					& next(val) = val
					& next(booked_round) = -1
					& next(timeout) = 4) )
				
	-- protocol has ended
	& ( (state = end) -- do nothing
			-> (next(state) = state
					& next(prepare_sent) = FALSE
					& next(accept_sent) = accept_sent
					& next(val) = val
					& next(booked_round) = booked_round
					& next(timeout) = 4) )
					
-- send <PREPARE, current_r>
	& ( (state = send_prepare
		& is_my_round)
			-> ( ( (next(state) = recv_promise
					& next(prepare_sent) = TRUE
					& next(booked_round) = current_r)
						| (next(state) = crashed
							& next(prepare_sent) = FALSE
							& next(booked_round) = booked_round) )
								& next(accept_sent) = FALSE
								& next(val) = val
								& next(timeout) = 4) )
	
		-- is NOT my round yet
	& ( (state = send_prepare
		& !is_my_round) -- do nothing
			-> (next(state) = state
					& next(prepare_sent) = FALSE
					& next(accept_sent) = FALSE
					& next(val) = val
					& next(booked_round) = booked_round
					& next(timeout) = 4) )
	
-- receive promises
		-- quorum reached
	& ( (state = recv_promise
		& quorum)
			-> (next(state) = send_accept
					& next(prepare_sent) = FALSE
					& next(accept_sent) = FALSE
					& next(val) = val
					& next(booked_round) = booked_round
					& next(timeout) = 4) )
					
		-- quorum NOT yet reached
		-- wait until timeout runs or quorum is reached
	& ( (state = recv_promise
		& !quorum
		& timeout > 0) -- update timeout and wait
				-> (next(state) = state
						& next(prepare_sent) = TRUE
						& next(accept_sent) = FALSE
						& next(val) = val
						& next(booked_round) = booked_round
						& next(timeout) = timeout - 1) )
	& ( (state = recv_promise
		& !quorum
		& timeout <= 0) -- restart
				-> (next(state) = send_prepare
						& next(prepare_sent) = FALSE
						& next(accept_sent) = FALSE
						& next(val) = val
						& next(booked_round) = -1
						& next(timeout) = 4) )
	
-- send <ACCEPT, val, booked_round>
		-- NO acceptor has voted yet
		-- send my original value
	& ( (state = send_accept
		& is_my_round
		& quorum
		& no_one_voted)
			-> ( ( (next(state) = end
					& next(accept_sent) = TRUE)
						| (next(state) = crashed
							& next(accept_sent) = FALSE) )
								& next(prepare_sent) = FALSE
								& next(val) = val
								& next(booked_round) = booked_round
								& next(timeout) = 4) )
				
		-- A1 has voted in the MAX round before
	& ( (state = send_accept
		& is_my_round
		& quorum
		& max_r_1)
			-> ( ( (next(state) = end
					& next(val) = lst_v_1
					& next(accept_sent) = TRUE)
					| (next(state) = crashed)
						& next(val) = val
						& next(accept_sent) = FALSE)
							& next(prepare_sent) = FALSE
							& next(booked_round) = booked_round
							& next(timeout) = 4) )
	
		-- A2 has voted in the MAX round before
	& ( (state = send_accept
		& is_my_round
		& quorum
		& max_r_2)
			-> ( ( (next(state) = end
					& next(val) = lst_v_2
					& next(accept_sent) = TRUE)
					| (next(state) = crashed)
						& next(val) = val
						& next(accept_sent) = FALSE)
							& next(prepare_sent) = FALSE
							& next(booked_round) = booked_round
							& next(timeout) = 4) )
	
		-- A3 has voted in the MAX round before
	& ( (state = send_accept
		& is_my_round
		& quorum
		& max_r_3)
			-> ( ( (next(state) = end
					& next(val) = lst_v_3
					& next(accept_sent) = TRUE)
					| (next(state) = crashed)
						& next(val) = val
						& next(accept_sent) = FALSE)
							& next(prepare_sent) = FALSE
							& next(booked_round) = booked_round
							& next(timeout) = 4) )
	
		-- (A1 and A2) or (A1 and A3) have voted in the MAX round before
	& ( (state = send_accept
		& is_my_round
		& quorum
		& (same_r_12 | same_r_13 | all_same_r))
			-> ( ( (next(state) = end
					& next(val) = lst_v_1
					& next(accept_sent) = TRUE)
					| (next(state) = crashed)
						& next(val) = val
						& next(accept_sent) = FALSE)
							& next(prepare_sent) = FALSE
							& next(booked_round) = booked_round
							& next(timeout) = 4) )
	
		-- A2 and A3 have voted in the MAX round before
	& ( (state = send_accept
		& is_my_round
		& quorum
		& same_r_23)
			-> ( ( (next(state) = end
					& next(val) = lst_v_2
					& next(accept_sent) = TRUE)
					| (next(state) = crashed)
						& next(val) = val
						& next(accept_sent) = FALSE)
							& next(prepare_sent) = FALSE
							& next(booked_round) = booked_round
							& next(timeout) = 4) )
	
		-- is NOT my round yet
	& ( (state = send_accept
		& quorum
		& !is_my_round) -- wait until correct round
			-> (next(state) = state
					& next(prepare_sent) = FALSE
					& next(accept_sent) = FALSE
					& next(val) = val
					& next(booked_round) = booked_round
					& next(timeout) = 4) )
	
		-- lost the quorum
	& ( (state = send_accept
		& !quorum) -- restart
				-> (next(state) = send_prepare
						& next(prepare_sent) = FALSE
						& next(accept_sent) = FALSE
						& next(val) = val
						& next(booked_round) = -1
						& next(timeout) = 4) )

DEFINE
	is_my_round := ( (current_r mod 2) = id );
	
	quorum := count(recv_pr_1, recv_pr_2, recv_pr_3) >= q;
	
	max_r_1 := ( (lst_r_1 > lst_r_2) & (lst_r_1 > lst_r_3)
				& recv_pr_1 & recv_pr_2 & recv_pr_3 )
					| ( (lst_r_1 > lst_r_2) & recv_pr_1 & recv_pr_2  & !recv_pr_3)
					| ( (lst_r_1 > lst_r_3) & recv_pr_1 & !recv_pr_2 & recv_pr_3)
					| (recv_pr_1 & !recv_pr_2 & !recv_pr_3);
	
	max_r_2 := ( (lst_r_2 > lst_r_1) & (lst_r_2 > lst_r_3)
				& recv_pr_1 & recv_pr_2 & recv_pr_3 )
					| ( (lst_r_2 > lst_r_1) & recv_pr_1  & recv_pr_2  & !recv_pr_3)
					| ( (lst_r_2 > lst_r_3) & !recv_pr_1 & recv_pr_2 & recv_pr_3)
					| (!recv_pr_1 & recv_pr_2 & !recv_pr_3);
	
	max_r_3 := ( (lst_r_3 > lst_r_1) & (lst_r_3 > lst_r_2)
				& recv_pr_1 & recv_pr_2 & recv_pr_3 )
					| ( (lst_r_3 > lst_r_2) & !recv_pr_1 & recv_pr_2 & recv_pr_3)
					| ( (lst_r_3 > lst_r_1) & recv_pr_1 & !recv_pr_2 & recv_pr_3)
					| (!recv_pr_1 & !recv_pr_2 & recv_pr_3);
					
	no_one_voted := ( (lst_r_1 = -1) & (lst_r_2 = -1) & (lst_r_3 = -1)
				& recv_pr_1 & recv_pr_2 & recv_pr_3 )
					| ( (lst_r_1 = -1) & recv_pr_1 & recv_pr_2 & !recv_pr_3
						& (lst_r_2 = -1))
					| ( (lst_r_1 = -1) & recv_pr_1 & !recv_pr_2 & recv_pr_3
						& (lst_r_3 = -1))
					| ( (lst_r_2 = -1) & !recv_pr_1 & recv_pr_2 & recv_pr_3
						& (lst_r_3 = -1));
	
	
	same_r_12 := ( (lst_r_1 = lst_r_2) & (lst_r_1 > lst_r_3)
				& recv_pr_1 & recv_pr_2 & recv_pr_3)
					| ( (lst_r_1 = lst_r_2) & (lst_r_1 != -1)
						& recv_pr_1 & recv_pr_2 & !recv_pr_3);
				
	same_r_13 := ( (lst_r_1 = lst_r_3) & (lst_r_1 > lst_r_2)
				& recv_pr_1 & recv_pr_2 & recv_pr_3 )
					| ( (lst_r_1 = lst_r_3) & (lst_r_1 != -1)
						& recv_pr_1 & !recv_pr_2 & recv_pr_3);
				
	same_r_23 := ( (lst_r_2 = lst_r_3) & (lst_r_2 > lst_r_1)
				& recv_pr_1 & recv_pr_2 & recv_pr_3)
					| ( (lst_r_2 = lst_r_3) & (lst_r_2 != -1)
						& !recv_pr_1 & recv_pr_2 & recv_pr_3);
						
	all_same_r := (lst_r_1 = lst_r_2) & (lst_r_1 = lst_r_3) & (lst_r_1 != -1)
				& recv_pr_1 & recv_pr_2 & recv_pr_3;


-- ## -- ## -- ## -- ## -- ## -- ## -- ## -- ## -- ## --


MODULE acceptor(current_r,
				prepare1, booked1, v1, a1,
				prepare2, booked2, v2, a2)
VAR
	state        :  { running, crashed };
					
	-- to the proposer
	last_voted_r   : -1 .. 10 ;
	last_voted_v   : -1 .. 2;
	promised_r     : -1 .. 10 ;
	sent_promise_1 : boolean;
	sent_promise_2 : boolean;
	
	-- to the learner
	sent_vote      : boolean;
	
INIT
	last_voted_r = -1
	& last_voted_v = -1
	& promised_r = -1
	& sent_promise_1 = FALSE
	& sent_promise_2 = FALSE
	& state = running
	& sent_vote = FALSE
TRANS
-- the acceptor crashed
	( (state = crashed)
			-> (next(state) = crashed
					& next(last_voted_r) = -1
					& next(last_voted_v) = -1
					& next(promised_r) = -1
					& next(sent_promise_1) = FALSE
					& next(sent_promise_2) = FALSE
					& next(sent_vote) = FALSE) )
	
	& ( (state = running)
			-> ( (next(state) = running)
					| (next(state) = crashed) ))
	
-- receive the <PREPARE, round> messages and send promises
		-- P1 sent a prepare
	& ( (state = running
		& prepare1
		& !prepare2
		& (booked1 >= promised_r))
			-> ( ( next(promised_r) = booked1
					& next(sent_promise_1) = TRUE
					& next(sent_promise_2) = FALSE) ) )

	& ( (state = running
		& prepare1
		& !prepare2
		& (booked1 < promised_r))
			-> (next(promised_r) = promised_r
					& next(sent_promise_1) = FALSE
					& next(sent_promise_2) = sent_promise_2 ) )
		
		-- P2 sent a prepare
	& ( (state = running
		& !prepare1
		& prepare2
		& (booked2 >= promised_r))
			-> ( (next(sent_promise_1) = FALSE
					& next(sent_promise_2) = TRUE
					& next(promised_r) = booked2 ) ) )
	& ( (state = running
		& !prepare1
		& prepare2
		& (booked2 < promised_r))
			-> (next(promised_r) = promised_r
					& next(sent_promise_1) = sent_promise_1
					& next(sent_promise_2) = FALSE ) )
	
		-- P1 and P2 sent a prepare
			-- booked1 >= booked2
	& ( (state = running
		& prepare1
		& prepare2
		& (booked1 >= booked2)
		& (booked1 >= promised_r) )
			-> ( (next(sent_promise_1) = TRUE
					& next(sent_promise_2) = FALSE
					& next(promised_r) = booked1) ) )
	& ( (state = running
		& prepare1
		& prepare2
		& (booked1 >= booked2)
		& (booked1 < promised_r))
			-> (next(promised_r) = -1
					& next(sent_promise_1) = FALSE
					& next(sent_promise_2) = FALSE ) )
		
		-- P1 and P2 sent a prepare
			-- booked1 < booked2
	& ( (state = running
		& prepare1
		& prepare2
		& (booked1 < booked2)
		& (booked2 >= promised_r) )
			-> ( next(sent_promise_1) = FALSE
					& next(sent_promise_2) = TRUE
					& next(promised_r) = booked2 ) )
	& ( (state = running
		& prepare1
		& prepare2
		& (booked1 < booked2)
		& (booked2 < promised_r) )
			-> (next(promised_r) = -1
					& next(sent_promise_1) = FALSE
					& next(sent_promise_2) = FALSE ) )
					
	-- NO ONE sent a prepare
	& ( (state = running
		& !prepare1
		& !prepare2)
			-> (next(promised_r) = promised_r
					& next(sent_promise_1) = sent_promise_1
					& next(sent_promise_2) = sent_promise_2 ) )
			
-- receive ACCEPT
		-- NO ONE sent an accept
	& ( (state = running
		& !a1
		& !a2)
			-> (next(last_voted_r) = last_voted_r
					& next(last_voted_v) = last_voted_v
					& next(sent_vote) = sent_vote ) )
	
		-- ACCEPT from P1
	& ( (state = running
		& a1
		& !a2
		& (booked1 >= promised_r) )
			-> (next(last_voted_v) = v1
					& next(last_voted_r) = booked1
					& next(sent_vote) = TRUE ) )
	& ( (state = running
		& a1
		& !a2
		& (booked1 < promised_r) )
			-> (next(last_voted_r) = last_voted_r
					& next(last_voted_v) = last_voted_v
					& next(sent_vote) = FALSE ) )
	
		-- from p2
	& ( (state = running
		& !a1
		& a2
		& (booked2 >= promised_r) )
			-> (next(last_voted_v) = v2
					& next(last_voted_r) = booked2
					& next(sent_vote) = TRUE ) )
	& ( (state = running
		& !a1
		& a2
		& (booked2 < promised_r) )
			-> (next(last_voted_r) = last_voted_r
					& next(last_voted_v) = last_voted_v
					& next(sent_vote) = FALSE ) )
	
		-- ACCEPT from P1 and P2
			-- P1 voted for a greater round
	& ( (state = running
		& a1
		& a2
		& (booked1 >= booked2)
		& (booked1 >= promised_r) )
			-> (next(last_voted_v) = v1
					& next(last_voted_r) = booked1
					& next(sent_vote) = TRUE ) )
	& ( (state = running
		& a1
		& a2
		& (booked1 >= booked2)
		& (booked1 < promised_r) )
			-> (next(last_voted_r) = last_voted_r
					& next(last_voted_v) = last_voted_v
					& next(sent_vote) = FALSE ) )
					
			-- P2 voted for a greater round
	& ( (state = running
		& a1
		& a2
		& (booked1 < booked2)
		& (booked2 >= promised_r) )
			-> (next(last_voted_v) = v2
					& next(last_voted_r) = booked2
					& next(sent_vote) = TRUE ) )
	& ( (state = running
		& a1
		& a2
		& (booked1 < booked2)
		& (booked2 < promised_r) )
			-> (next(last_voted_r) = last_voted_r
					& next(last_voted_v) = last_voted_v
					& next(sent_vote) = FALSE ) )


-- ## -- ## -- ## -- ## -- ## -- ## -- ## -- ## -- ## --



MODULE learner(recv1, v1, r1,
				recv2, v2, r2,
				recv3, v3, r3)
VAR
	decided      : boolean;
	chosen_value : 0 .. 2;
	vote1        : 0 .. 2;
	round1       : -1 .. 10 ;
	vote2        : 0 .. 2;
	round2       : -1 .. 10 ;
	vote3        : 0 .. 2;
	round3       : -1 .. 10 ;

INIT
	decided = FALSE
	& chosen_value = 0
	& vote1 = 0
	& round1 = -1
	& vote2 = 0
	& round2 = -1
	& vote3 = 0
	& round3 = -1

TRANS
	-- message from a1
	( recv1
		-> (next(vote1) = v1
				& next(round1) = r1) )
	& ( !recv1
		-> (next(vote1) = vote1
				& next(round1) = round1) )
				
	-- message from a2
	& ( recv2
		-> (next(vote2) = v2
				& next(round2) = r2) )
	& ( !recv2
		-> (next(vote2) = vote2
				& next(round2) = round2) )
				
	-- message from a3
	& ( recv3
		-> (next(vote3) = v3
				& next(round3) = r3) )
	& ( !recv3
		-> (next(vote3) = vote3
				& next(round3) = round3) )
	
	-- consensus reached
		-- value 1
	& ( (v1_consensus)
			-> (next(decided) = TRUE
					& next(chosen_value) = vote1) )
	
		-- value 2
	& ( (v2_consensus)
			-> (next(decided) = TRUE
					& next(chosen_value) = vote2) )
	
		-- value 3
	& ( (v3_consensus)
			-> (next(decided) = TRUE
					& next(chosen_value) = vote3) )
	
		-- no consensus
	& ( (!v1_consensus
		& !v2_consensus
		& !v3_consensus)
			-> (next(decided) = decided
					& next(chosen_value) = chosen_value) )

DEFINE
	
	v1_consensus := ( ((vote1 = vote2) & (round1 = round2))
						| ((vote1 = vote3) & (round1 = round3)) )
						& vote1 > 0;
	v2_consensus := ( ((vote1 = vote2) & (round1 = round2))
						| ((vote2 = vote3) & (round2 = round3)) )
						& vote2 > 0;
	v3_consensus := ( ((vote2 = vote3) & (round2 = round3))
						| ((vote1 = vote3) & (round1 = round3)) )
						& vote3 > 0;